import React, { useEffect, useMemo } from "react";
import { useAccount, useReadContract, useWriteContract, useChainId, useSwitchChain } from "wagmi";
import { contracts } from "../contracts/contractsList";
import { base, baseSepolia } from 'wagmi/chains';

const DailyStreakButton = () => {
  // Hook ƒë·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n v√† tr·∫°ng th√°i k·∫øt n·ªëi
  const { address, isConnected } = useAccount();
  
  // Hook ƒë·ªÉ l·∫•y chainId c·ªßa m·∫°ng l∆∞·ªõi hi·ªán t·∫°i m√† v√≠ ƒëang k·∫øt n·ªëi
  const chainId = useChainId();

  // Hook ƒë·ªÉ cung c·∫•p ch·ª©c nƒÉng y√™u c·∫ßu v√≠ chuy·ªÉn m·∫°ng
  const { switchChain } = useSwitchChain();

  // T·ª± ƒë·ªông ch·ªçn ƒë·ªãa ch·ªâ smart contract d·ª±a tr√™n chainId hi·ªán t·∫°i.
  // useMemo ƒë∆∞·ª£c d√πng ƒë·ªÉ t·ªëi ∆∞u, ch·ªâ t√≠nh to√°n l·∫°i khi chainId thay ƒë·ªïi.
  const contractAddress = useMemo(() => {
    // N·∫øu ch∆∞a c√≥ chainId (v√≠ d·ª• khi ƒëang t·∫£i trang), tr·∫£ v·ªÅ undefined
    if (!chainId) return undefined;
    // Tra c·ª©u ƒë·ªãa ch·ªâ trong file config b·∫±ng chainId
    return contracts.dailyStreak.address[chainId];
  }, [chainId]);

  // Hook ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông GHI v√†o smart contract (g·ª≠i giao d·ªãch)
  const { data: hash, isPending, error, writeContract } = useWriteContract();

  // Hook ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông ƒê·ªåC t·ª´ smart contract
  const { data: streak, isLoading: isStreakLoading, refetch } = useReadContract({
    address: contractAddress, // S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª± ƒë·ªông
    abi: contracts.dailyStreak.abi,
    functionName: 'getStreak',
    args: [address], // Truy·ªÅn ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng l√†m tham s·ªë
    // ƒêi·ªÅu ki·ªán ƒë·ªÉ hook n√†y ch·∫°y: ng∆∞·ªùi d√πng ph·∫£i k·∫øt n·ªëi v√≠,
    // v√† ph·∫£i c√≥ m·ªôt ƒë·ªãa ch·ªâ contract h·ª£p l·ªá cho m·∫°ng hi·ªán t·∫°i.
    enabled: isConnected && !!address && !!contractAddress,
  });

  // H√†m x·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
  const handleCheckIn = () => {
    // ƒê·∫£m b·∫£o c√≥ ƒë·ªãa ch·ªâ contract tr∆∞·ªõc khi th·ª±c hi·ªán
    if (!contractAddress) return;

    // G·ªçi h√†m writeContract do wagmi cung c·∫•p, truy·ªÅn v√†o c√°c th√¥ng tin c·∫ßn thi·∫øt
    writeContract({
      address: contractAddress,
      abi: contracts.dailyStreak.abi,
      functionName: 'checkIn',
      args: [], // H√†m checkIn n√†y kh√¥ng c√≥ tham s·ªë
    });
  };

  // S·ª≠ d·ª•ng useEffect ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi c·ªßa `hash` (m√£ giao d·ªãch)
  // Khi c√≥ `hash` m·ªõi (giao d·ªãch th√†nh c√¥ng), t·ª± ƒë·ªông g·ªçi `refetch` ƒë·ªÉ c·∫≠p nh·∫≠t streak
  useEffect(() => {
    if (hash) {
      console.log('Check-in successful, transaction hash:', hash);
      refetch();
    }
  }, [hash, refetch]);

  // --- RENDER LOGIC ---

  // Tr∆∞·ªùng h·ª£p 1: Ng∆∞·ªùi d√πng ƒë√£ k·∫øt n·ªëi v√≠ nh∆∞ng ƒëang ·ªü m·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
  // (kh√¥ng t√¨m th·∫•y contractAddress cho chainId hi·ªán t·∫°i)
  if (isConnected && !contractAddress) {
    return (
      <div className="mt-2 p-4 border border-yellow-400 bg-yellow-50 rounded-lg">
        <p className="text-yellow-700 font-semibold">
          Network Not Supported
        </p>
        <p className="text-yellow-600 text-sm mt-1">
          Please switch to a supported network to continue.
        </p>
        <div className="mt-3 space-x-2">
            {/* N√∫t y√™u c·∫ßu chuy·ªÉn sang Base Mainnet */}
            <button
                onClick={() => switchChain({ chainId: base.id })}
                className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700"
            >
                Switch to Base Mainnet
            </button>
            {/* N√∫t y√™u c·∫ßu chuy·ªÉn sang Base Sepolia Testnet */}
            <button
                onClick={() => switchChain({ chainId: baseSepolia.id })}
                className="px-4 py-2 bg-gray-600 text-white text-sm font-medium rounded-lg hover:bg-gray-700"
            >
                Switch to Base Sepolia
            </button>
        </div>
      </div>
    );
  }

  // Tr∆∞·ªùng h·ª£p 2: Giao di·ªán ch√≠nh khi m·ªçi th·ª© ƒë·ªÅu h·ª£p l·ªá
  return (
    <div className="mt-2">
      <button
        onClick={handleCheckIn}
        // V√¥ hi·ªáu h√≥a n√∫t khi:
        // 1. V√≠ ch∆∞a k·∫øt n·ªëi
        // 2. Giao d·ªãch ƒëang ch·ªù x·ª≠ l√Ω
        // 3. (An to√†n k√©p) Kh√¥ng c√≥ ƒë·ªãa ch·ªâ contract h·ª£p l·ªá
        disabled={!isConnected || isPending || !contractAddress}
        className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
      >
        {isPending ? "Confirming in wallet..." : "Daily Streak Check-in"}
      </button>

      {/* Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i streak */}
      {isStreakLoading && <p className="mt-2 text-sm text-gray-600">Loading streak...</p>}

      {/* Hi·ªÉn th·ªã streak sau khi t·∫£i xong */}
      {streak !== null && streak !== undefined && (
        <p className="mt-2 text-sm text-gray-600">
          Your current streak: <span className="font-bold">{streak.toString()} üî•</span>
        </p>
      )}

      {/* Hi·ªÉn th·ªã l·ªói n·∫øu giao d·ªãch th·∫•t b·∫°i */}
      {error && (
        <p className="mt-2 text-sm text-red-500">
          Error: {error.shortMessage || error.message}
        </p>
      )}
    </div>
  );
};

export default DailyStreakButton;